#ifndef UDATA_PACKET_IMPORT_VERSION_HPP
#define UDATA_PACKET_IMPORT_VERSION_HPP
#include <string>
#define UDataPacketImport_MAJOR @uDataPacketImport_VERSION_MAJOR@
#define UDataPacketImport_MINOR @uDataPacketImport_VERSION_MINOR@
#define UDataPacketImport_PATCH @uDataPacketImport_VERSION_PATCH@
#define UDataPacketImport_VERSION "@PROJECT_VERSION@"
namespace UDataPacketImport
{
/// @class Version version.hpp "uDataPacket/version.hpp"
/// @brief Defines uDataPacket's version information.
/// @copyright Ben Baker (University of Utah) distributed under the MIT license.
class Version
{
public:
    /// @result The API's major version number.
    [[nodiscard]] static int getMajor() noexcept;
    /// @result The API's minor version number.
    [[nodiscard]] static int getMinor() noexcept;
    /// @result The API's patch version number.
    [[nodiscard]] static int getPatch() noexcept;
    /// @result The full version number as a string, e.g., "1.2.3".
    [[nodiscard]] static std::string getVersion() noexcept;
    /// @brief Determines if the version is greater than or equal to
    ///        the current (major, minor, patch).
    /// @param[in] major  The major version number.
    /// @param[in] minor  The minor version number.
    /// @param[in] patch  The patch number.
    /// @result True indicates that the version is at least equal to the
    ///         given major, minor, patch.
    [[nodiscard]] static bool isAtLeast(int major, int minor, int patch) noexcept;
};
}
#endif
